class AdminPanel {
    constructor() {
        this.updateInterval = 30000; // 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
        this.defaultSettings = this.loadDefaultSettings();
        this.originalSettings = {}; // –ò—Å—Ö–æ–¥–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        this.hasUnsavedChanges = false; // –§–ª–∞–≥ –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
        this.currentMode = 'current'; // 'current' –∏–ª–∏ 'default'
        this.customDefaults = {}; // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        this.init();
    }

    init() {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∫–∏...');

        // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ DOM
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', () => this.startInit());
        } else {
            this.startInit();
        }
    }

    startInit() {
        console.log('üìä –ó–∞–ø—É—Å–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö...');

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
        this.loadStats();
        this.loadAlertSettings();
        this.loadNotificationSettings();
        this.loadActiveAlerts();
        this.loadUsers();
        this.loadAuditLogs();

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ñ–æ—Ä–º
        this.setupEventHandlers();

        // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        setInterval(() => {
            this.loadStats();
            this.loadActiveAlerts();
        }, this.updateInterval);
    }

    setupEventHandlers() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π
        const alertForm = document.getElementById('alert-settings-form');
        if (alertForm) {
            alertForm.addEventListener('submit', (e) => {
                e.preventDefault();
                this.saveAlertSettings();
            });
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã email –Ω–∞—Å—Ç—Ä–æ–µ–∫
        const emailForm = document.getElementById('email-settings-form');
        if (emailForm) {
            emailForm.addEventListener('submit', (e) => {
                e.preventDefault();
                this.saveNotificationSettings();
            });
        }

        console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    }

    loadDefaultSettings() {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —É–º–æ–ª—á–∞–Ω–∏—è –∏–∑ localStorage –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ
        const savedDefaults = localStorage.getItem('admin_default_settings');
        if (savedDefaults) {
            try {
                return JSON.parse(savedDefaults);
            } catch (e) {
                console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —É–º–æ–ª—á–∞–Ω–∏–π:', e);
            }
        }

        // –°–∏—Å—Ç–µ–º–Ω—ã–µ —É–º–æ–ª—á–∞–Ω–∏—è - –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –¶–û–î
        return {
            'cpu': { warning: 70, critical: 85, email: true, escalation: 15 },
            'memory': { warning: 75, critical: 90, email: true, escalation: 10 },
            'disk': { warning: 80, critical: 90, email: true, escalation: 30 },
            'temperature': { warning: 30, critical: 40, email: true, escalation: 5 },
            'humidity': { warning: 65, critical: 80, email: false, escalation: 60 }
        };
    }

    async loadStats() {
        try {
            console.log('üìà –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');
            const response = await fetch('/api/alerts/stats');

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}`);
            }

            const stats = await response.json();
            console.log('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞:', stats);

            // –û–±–Ω–æ–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            this.updateElement('total-alerts-24h', stats.total_alerts_24h || 0);
            this.updateElement('critical-alerts-24h', stats.critical_alerts_24h || 0);
            this.updateElement('resolved-alerts-24h', stats.resolved_alerts_24h || 0);
            this.updateElement('active-alerts', stats.active_alerts || 0);

            console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
            this.updateElement('total-alerts-24h', '0');
            this.updateElement('critical-alerts-24h', '0');
            this.updateElement('resolved-alerts-24h', '0');
            this.updateElement('active-alerts', '0');
        }
    }

    async loadAlertSettings() {
        try {
            console.log('‚öôÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π...');
            const response = await fetch('/api/settings/alerts');

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}`);
            }

            const settings = await response.json();
            console.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã:', settings);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
            if (Object.keys(this.originalSettings).length === 0) {
                settings.forEach(setting => {
                    this.originalSettings[setting.metric_type] = {
                        warning: setting.warning_threshold,
                        critical: setting.critical_threshold,
                        email: setting.email_enabled,
                        escalation: setting.escalation_minutes
                    };
                });
            }

            const tableBody = document.getElementById('alert-settings-table');
            if (!tableBody) {
                console.error('–ù–µ –Ω–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç alert-settings-table');
                return;
            }

            tableBody.innerHTML = '';

            const metricNames = {
                'cpu': '–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä (%)',
                'memory': '–ü–∞–º—è—Ç—å (%)',
                'disk': '–î–∏—Å–∫ (%)',
                'temperature': '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)',
                'humidity': '–í–ª–∞–∂–Ω–æ—Å—Ç—å (%)'
            };

            settings.forEach(setting => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>
                        <strong>${metricNames[setting.metric_type] || setting.metric_type}</strong>
                    </td>
                    <td>
                        <input type="number" class="form-control form-control-sm" 
                               value="${setting.warning_threshold}" 
                               data-metric="${setting.metric_type}" 
                               data-field="warning_threshold"
                               min="0" max="100" step="0.1">
                    </td>
                    <td>
                        <input type="number" class="form-control form-control-sm" 
                               value="${setting.critical_threshold}" 
                               data-metric="${setting.metric_type}" 
                               data-field="critical_threshold"
                               min="0" max="100" step="0.1">
                    </td>
                    <td>
                        <div class="form-check">
                            <input type="checkbox" class="form-check-input" 
                                   ${setting.email_enabled ? 'checked' : ''}
                                   data-metric="${setting.metric_type}" 
                                   data-field="email_enabled">
                        </div>
                    </td>
                    <td>
                        <input type="number" class="form-control form-control-sm" 
                               value="${setting.escalation_minutes}" 
                               data-metric="${setting.metric_type}" 
                               data-field="escalation_minutes"
                               min="1" max="1440">
                    </td>
                    <td>
                        <div class="btn-group btn-group-sm" role="group">
                            <button type="button" class="btn btn-outline-secondary" 
                                    onclick="resetMetricToDefault('${setting.metric_type}')"
                                    title="–°–±—Ä–æ—Å–∏—Ç—å –∫ —É–º–æ–ª—á–∞–Ω–∏—é">
                                <i class="fas fa-undo"></i>
                            </button>
                            <button type="button" class="btn btn-outline-info" 
                                    onclick="testMetricAlert('${setting.metric_type}')"
                                    title="–¢–µ—Å—Ç–æ–≤–æ–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ">
                                <i class="fas fa-bell"></i>
                            </button>
                        </div>
                    </td>
                `;
                tableBody.appendChild(row);
            });

            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
            this.hasUnsavedChanges = false;
            this.updateButtonsState();

            console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω—ã');

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π:', error);
        }
    }

    async loadNotificationSettings() {
        try {
            console.log('üìß –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');
            const response = await fetch('/api/settings/notifications');

            if (!response.ok) {
                console.warn('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–º–æ–ª—á–∞–Ω–∏—è');
                return;
            }

            const settings = await response.json();

            if (settings.smtp_server) {
                this.updateInputValue('smtp-server', settings.smtp_server || '');
                this.updateInputValue('smtp-port', settings.smtp_port || 587);
                this.updateInputValue('smtp-username', settings.smtp_username || '');
                this.updateInputValue('from-email', settings.from_email || '');

                if (settings.to_emails) {
                    try {
                        const emails = JSON.parse(settings.to_emails);
                        this.updateInputValue('to-emails', emails.join(', '));
                    } catch (e) {
                        console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ to_emails:', e);
                    }
                }

                if (settings.admin_emails) {
                    try {
                        const adminEmails = JSON.parse(settings.admin_emails);
                        this.updateInputValue('admin-emails', adminEmails.join(', '));
                    } catch (e) {
                        console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ admin_emails:', e);
                    }
                }
            }

            console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω—ã');

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
        }
    }

    async loadActiveAlerts() {
        try {
            console.log('üö® –ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤...');
            const limit = document.getElementById('alerts-limit')?.value || 10;
            const response = await fetch(`/api/alerts/active?limit=${limit}`);

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}`);
            }

            const alerts = await response.json();

            const container = document.getElementById('active-alerts-container');
            if (!container) {
                console.error('–ù–µ –Ω–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç active-alerts-container');
                return;
            }

            if (alerts.length === 0) {
                container.innerHTML = '<p class="text-muted text-center">–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤</p>';
                return;
            }

            container.innerHTML = alerts.map(alert => `
                <div class="alert alert-${alert.severity === 'critical' ? 'danger' : 'warning'} d-flex justify-content-between align-items-center">
                    <div>
                        <strong>${alert.alert_type.toUpperCase()}</strong> - ${alert.message}
                        <br>
                        <small class="text-muted">${alert.timestamp}</small>
                    </div>
                    <button class="btn btn-sm btn-outline-success" onclick="resolveAlert(${alert.id})">
                        <i class="fas fa-check"></i> –†–∞–∑—Ä–µ—à–∏—Ç—å
                    </button>
                </div>
            `).join('');

            console.log('‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã');

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤:', error);
            const container = document.getElementById('active-alerts-container');
            if (container) {
                container.innerHTML = '<p class="text-muted text-center">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤</p>';
            }
        }
    }

    async loadUsers() {
        try {
            console.log('üë• –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
            const response = await fetch('/api/users');

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}`);
            }

            const users = await response.json();

            const tableBody = document.getElementById('users-table');
            if (!tableBody) {
                console.error('–ù–µ –Ω–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç users-table');
                return;
            }

            tableBody.innerHTML = users.map(user => `
                <tr>
                    <td>
                        <strong style="color: var(--text-primary) !important;">${user.username}</strong>
                        ${user.id === 1 ? '<span class="badge bg-primary ms-2">–°–∏—Å—Ç–µ–º–Ω—ã–π</span>' : ''}
                    </td>
                    <td style="color: var(--text-primary) !important;">${user.email}</td>
                    <td>
                        <span class="badge" style="background-color: ${this.getRoleBadgeColor(user.role)}; color: white;">
                            ${this.getRoleDisplayName(user.role)}
                        </span>
                    </td>
                    <td>
                        <span class="badge bg-${user.is_active ? 'success' : 'secondary'}">
                            ${user.is_active ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–û—Ç–∫–ª—é—á–µ–Ω'}
                        </span>
                    </td>
                    <td style="color: var(--text-primary) !important;">
                        ${user.last_login ? new Date(user.last_login).toLocaleString('ru-RU') : '–ù–∏–∫–æ–≥–¥–∞'}
                    </td>
                    <td>
                        ${user.id !== 1 ? `
                            <button class="btn btn-sm btn-outline-primary me-1" onclick="editUser(${user.id})">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button class="btn btn-sm btn-outline-danger" onclick="deleteUser(${user.id}, '${user.username}')">
                                <i class="fas fa-trash"></i>
                            </button>
                        ` : '<span class="text-muted">–°–∏—Å—Ç–µ–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</span>'}
                    </td>
                </tr>
            `).join('');

            console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
            const tableBody = document.getElementById('users-table');
            if (tableBody) {
                tableBody.innerHTML = '<tr><td colspan="6" class="text-center text-muted">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</td></tr>';
            }
        }
    }

    async loadAuditLogs() {
        try {
            console.log('üìã –ó–∞–≥—Ä—É–∑–∫–∞ –∂—É—Ä–Ω–∞–ª–∞ –∞—É–¥–∏—Ç–∞...');
            const limit = document.getElementById('audit-limit')?.value || 20;
            const response = await fetch(`/api/audit-logs?per_page=${limit}`);

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}`);
            }

            const data = await response.json();

            const container = document.getElementById('audit-logs-container');
            if (!container) {
                console.error('–ù–µ –Ω–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç audit-logs-container');
                return;
            }

            if (data.logs && data.logs.length > 0) {
                container.innerHTML = `
                    <div class="table-responsive">
                        <table class="table table-sm">
                            <thead>
                                <tr>
                                    <th>–í—Ä–µ–º—è</th>
                                    <th>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</th>
                                    <th>–î–µ–π—Å—Ç–≤–∏–µ</th>
                                    <th>–†–µ—Å—É—Ä—Å</th>
                                    <th>–î–µ—Ç–∞–ª–∏</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${data.logs.map(log => `
                                    <tr>
                                        <td>${new Date(log.timestamp).toLocaleString('ru-RU')}</td>
                                        <td>${log.username}</td>
                                        <td><span class="badge" style="background-color: #1E40AF; color: white;">${log.action}</span></td>
                                        <td>${log.resource || '-'}</td>
                                        <td>${log.details || '-'}</td>
                                    </tr>
                                `).join('')}
                            </tbody>
                        </table>
                    </div>
                    <p class="text-muted text-center mt-3">
                        –ü–æ–∫–∞–∑–∞–Ω–æ ${data.logs.length} –∏–∑ ${data.total} –∑–∞–ø–∏—Å–µ–π
                        ${data.total > limit ? `(–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ ${limit} –∑–∞–ø–∏—Å—è–º–∏)` : ''}
                    </p>
                `;
            } else {
                container.innerHTML = '<p class="text-muted text-center">–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ –∂—É—Ä–Ω–∞–ª–µ</p>';
            }

            console.log('‚úÖ –ñ—É—Ä–Ω–∞–ª –∞—É–¥–∏—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω');

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∂—É—Ä–Ω–∞–ª–∞:', error);
            const container = document.getElementById('audit-logs-container');
            if (container) {
                container.innerHTML = '<p class="text-muted text-center">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∂—É—Ä–Ω–∞–ª–∞ –∞—É–¥–∏—Ç–∞</p>';
            }
        }
    }

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Ä–µ–∂–∏–º–∞–º–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    switchSettingsMode(mode) {
        this.currentMode = mode;

        const saveButtonText = document.getElementById('saveButtonText');
        const resetButtonText = document.getElementById('resetButtonText');
        const modeIndicator = document.getElementById('modeIndicator');

        if (mode === 'current') {
            saveButtonText.textContent = '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏';
            resetButtonText.textContent = '–°–±—Ä–æ—Å–∏—Ç—å –∫ —É–º–æ–ª—á–∞–Ω–∏—è–º';
            modeIndicator.textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä—É—é—Ç—Å—è —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏';
            modeIndicator.className = 'badge bg-primary';

            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            this.loadAlertSettings();
        } else {
            saveButtonText.textContent = '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ —É–º–æ–ª—á–∞–Ω–∏—è';
            resetButtonText.textContent = '–°–±—Ä–æ—Å–∏—Ç—å –∫ —Å–∏—Å—Ç–µ–º–Ω—ã–º';
            modeIndicator.textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä—É—é—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é';
            modeIndicator.className = 'badge bg-success';

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            this.loadCustomDefaults();
        }
    }

    async loadCustomDefaults() {
        try {
            const response = await fetch('/api/settings/get-defaults');
            if (response.ok) {
                const settings = await response.json();
                this.customDefaults = settings;
                this.applySettingsToForm(settings);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:', error);
        }
    }

    applySettingsToForm(settings) {
        const tableBody = document.getElementById('alert-settings-table');
        if (!tableBody) return;

        const rows = tableBody.querySelectorAll('tr');
        rows.forEach(row => {
            const metricInput = row.querySelector('[data-metric]');
            if (metricInput) {
                const metric = metricInput.dataset.metric;
                const setting = settings[metric];

                if (setting) {
                    row.querySelector('[data-field="warning_threshold"]').value = setting.warning || setting.warning_threshold;
                    row.querySelector('[data-field="critical_threshold"]').value = setting.critical || setting.critical_threshold;
                    row.querySelector('[data-field="email_enabled"]').checked = setting.email !== undefined ? setting.email : setting.email_enabled;
                    row.querySelector('[data-field="escalation_minutes"]').value = setting.escalation || setting.escalation_minutes;
                }
            }
        });
    }

    resetSettings() {
        if (this.currentMode === 'current') {
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if (confirm('–°–±—Ä–æ—Å–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º —É–º–æ–ª—á–∞–Ω–∏—è–º?')) {
                this.applySettingsToForm(this.customDefaults);
                this.showAlert('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ —É–º–æ–ª—á–∞–Ω–∏—è–º', 'info');
            }
        } else {
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —É–º–æ–ª—á–∞–Ω–∏—è –∫ —Å–∏—Å—Ç–µ–º–Ω—ã–º
            if (confirm('–°–±—Ä–æ—Å–∏—Ç—å –∫ —Å–∏—Å—Ç–µ–º–Ω—ã–º —É–º–æ–ª—á–∞–Ω–∏—è–º?')) {
                const systemDefaults = {
                    'cpu': { warning: 70, critical: 85, email: true, escalation: 15 },
                    'memory': { warning: 75, critical: 90, email: true, escalation: 10 },
                    'disk': { warning: 80, critical: 90, email: true, escalation: 30 },
                    'temperature': { warning: 30, critical: 40, email: true, escalation: 5 },
                    'humidity': { warning: 65, critical: 80, email: false, escalation: 60 }
                };
                this.applySettingsToForm(systemDefaults);
                this.showAlert('–°–±—Ä–æ—à–µ–Ω–æ –∫ —Å–∏—Å—Ç–µ–º–Ω—ã–º —É–º–æ–ª—á–∞–Ω–∏—è–º', 'info');
            }
        }
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    async saveAlertSettings() {
        try {
            if (this.currentMode === 'default') {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                const settings = this.getCurrentSettings();

                const response = await fetch('/api/settings/save-defaults', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(settings)
                });

                if (response.ok) {
                    this.customDefaults = settings;
                    this.showAlert('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω—ã!', 'success');
                } else {
                    this.showAlert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é', 'danger');
                }
            } else {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                const settings = [];
                const tableBody = document.getElementById('alert-settings-table');
                const rows = tableBody.querySelectorAll('tr');

                rows.forEach(row => {
                    const metricInput = row.querySelector('[data-field="warning_threshold"]');
                    if (metricInput && metricInput.dataset.metric) {
                        const metric = metricInput.dataset.metric;
                        settings.push({
                            metric_type: metric,
                            warning_threshold: parseFloat(row.querySelector('[data-field="warning_threshold"]').value),
                            critical_threshold: parseFloat(row.querySelector('[data-field="critical_threshold"]').value),
                            email_enabled: row.querySelector('[data-field="email_enabled"]').checked,
                            escalation_minutes: parseInt(row.querySelector('[data-field="escalation_minutes"]').value)
                        });
                    }
                });

                const response = await fetch('/api/settings/alerts', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(settings)
                });

                const result = await response.json();
                if (result.success) {
                    this.showAlert('–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!', 'success');
                } else {
                    this.showAlert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ' + result.error, 'danger');
                }
            }
        } catch (error) {
            this.showAlert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ' + error.message, 'danger');
        }
    }

    async saveNotificationSettings() {
        try {
            const toEmails = document.getElementById('to-emails').value
                .split(',')
                .map(email => email.trim())
                .filter(email => email);

            const adminEmails = document.getElementById('admin-emails').value
                .split(',')
                .map(email => email.trim())
                .filter(email => email);

            const data = {
                smtp_server: document.getElementById('smtp-server').value,
                smtp_port: parseInt(document.getElementById('smtp-port').value),
                smtp_username: document.getElementById('smtp-username').value,
                from_email: document.getElementById('from-email').value,
                to_emails: toEmails,
                admin_emails: adminEmails
            };

            const password = document.getElementById('smtp-password').value;
            if (password) {
                data.smtp_password = password;
            }

            const response = await fetch('/api/settings/notifications', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data)
            });

            const result = await response.json();

            if (result.success) {
                this.showAlert('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ email —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!', 'success');
                document.getElementById('smtp-password').value = '';
            } else {
                this.showAlert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: ' + result.error, 'danger');
            }

        } catch (error) {
            this.showAlert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: ' + error.message, 'danger');
        }
    }

    getCurrentSettings() {
        const settings = {};
        const tableBody = document.getElementById('alert-settings-table');
        if (!tableBody) return settings;

        const rows = tableBody.querySelectorAll('tr');
        rows.forEach(row => {
            const warningInput = row.querySelector('[data-field="warning_threshold"]');
            if (warningInput && warningInput.dataset.metric) {
                const metric = warningInput.dataset.metric;
                settings[metric] = {
                    warning: parseFloat(row.querySelector('[data-field="warning_threshold"]').value),
                    critical: parseFloat(row.querySelector('[data-field="critical_threshold"]').value),
                    email: row.querySelector('[data-field="email_enabled"]').checked,
                    escalation: parseInt(row.querySelector('[data-field="escalation_minutes"]').value)
                };
            }
        });
        return settings;
    }

    showAlert(message, type) {
        const alertDiv = document.createElement('div');
        alertDiv.className = `alert alert-${type} alert-dismissible fade show position-fixed`;
        alertDiv.style.cssText = 'top: 20px; right: 20px; z-index: 1060; min-width: 300px;';
        alertDiv.innerHTML = `
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        `;

        document.body.appendChild(alertDiv);

        setTimeout(() => {
            if (alertDiv.parentNode) {
                alertDiv.parentNode.removeChild(alertDiv);
            }
        }, 5000);
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    updateElement(id, value) {
        const element = document.getElementById(id);
        if (element) {
            element.textContent = value;
        } else {
            console.warn(`–≠–ª–µ–º–µ–Ω—Ç ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        }
    }

    updateInputValue(id, value) {
        const element = document.getElementById(id);
        if (element) {
            element.value = value;
        } else {
            console.warn(`–≠–ª–µ–º–µ–Ω—Ç ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        }
    }

    getRoleBadgeColor(role) {
        const colors = {
            'admin': '#DC3545',
            'operator': '#FFC107',
            'viewer': '#1E40AF'
        };
        return colors[role] || '#6C757D';
    }

    getRoleDisplayName(role) {
        const names = {
            'admin': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
            'operator': '–û–ø–µ—Ä–∞—Ç–æ—Ä',
            'viewer': '–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å'
        };
        return names[role] || role;
    }

    updateButtonsState() {
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫
        console.log('–°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–æ');
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function updateAlertsLimit() {
    if (window.adminPanel) {
        window.adminPanel.loadActiveAlerts();
    }
}

function updateAuditLimit() {
    if (window.adminPanel) {
        window.adminPanel.loadAuditLogs();
    }
}

function refreshAlerts() {
    if (window.adminPanel) {
        window.adminPanel.loadActiveAlerts();
        window.adminPanel.loadStats();
    }
}

async function resolveAlert(alertId) {
    try {
        const response = await fetch(`/api/alerts/resolve/${alertId}`, {
            method: 'POST'
        });

        const result = await response.json();

        if (result.success && window.adminPanel) {
            window.adminPanel.loadActiveAlerts();
            window.adminPanel.loadStats();
        }

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞:', error);
    }
}

function resetMetricToDefault(metricType) {
    const modal = new bootstrap.Modal(document.getElementById('confirmResetModal'));
    document.getElementById('reset-metric-name').textContent = metricType;

    document.getElementById('confirm-reset-btn').onclick = () => {
        if (window.adminPanel) {
            const tableBody = document.getElementById('alert-settings-table');
            const row = Array.from(tableBody.querySelectorAll('tr')).find(r =>
                r.querySelector(`[data-metric="${metricType}"]`)
            );

            if (row) {
                const defaults = window.adminPanel.defaultSettings[metricType];
                if (defaults) {
                    row.querySelector('[data-field="warning_threshold"]').value = defaults.warning;
                    row.querySelector('[data-field="critical_threshold"]').value = defaults.critical;
                    row.querySelector('[data-field="email_enabled"]').checked = defaults.email;
                    row.querySelector('[data-field="escalation_minutes"]').value = defaults.escalation;

                    window.adminPanel.showAlert(`–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ${metricType} —Å–±—Ä–æ—à–µ–Ω—ã –∫ —É–º–æ–ª—á–∞–Ω–∏—é`, 'info');
                }
            }
        }
        modal.hide();
    };

    modal.show();
}

function testMetricAlert(metricType) {
    alert(`–¢–µ—Å—Ç–æ–≤–æ–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –¥–ª—è ${metricType} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`);
}

function showCreateUserModal() {
    const modal = new bootstrap.Modal(document.getElementById('createUserModal'));
    modal.show();
}

async function createUser() {
    try {
        const form = document.getElementById('createUserForm');
        const formData = new FormData(form);

        const data = {
            username: formData.get('username'),
            email: formData.get('email'),
            password: formData.get('password'),
            role: formData.get('role'),
            is_active: formData.has('is_active')
        };

        const response = await fetch('/api/users', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(data)
        });

        const result = await response.json();

        if (result.success) {
            bootstrap.Modal.getInstance(document.getElementById('createUserModal')).hide();
            form.reset();
            if (window.adminPanel) {
                window.adminPanel.loadUsers();
            }
            alert('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!');
        } else {
            alert('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ' + result.error);
        }

    } catch (error) {
        alert('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ' + error.message);
    }
}

function editUser(userId) {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    fetch('/api/users')
        .then(response => response.json())
        .then(users => {
            const user = users.find(u => u.id === userId);
            if (user) {
                // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
                const form = document.getElementById('createUserForm');
                form.reset();

                // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                form.querySelector('[name="username"]').value = user.username;
                form.querySelector('[name="email"]').value = user.email;
                form.querySelector('[name="role"]').value = user.role;
                form.querySelector('[name="is_active"]').checked = user.is_active;

                // –°–∫—Ä—ã–≤–∞–µ–º –ø–æ–ª–µ –ø–∞—Ä–æ–ª—è –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
                const passwordField = form.querySelector('[name="password"]');
                const passwordContainer = passwordField.closest('.mb-3');
                passwordContainer.style.display = 'none';
                passwordField.required = false;

                // –ú–µ–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
                document.querySelector('#createUserModal .modal-title').textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è';

                // –ú–µ–Ω—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞ "–û–±–Ω–æ–≤–∏—Ç—å"
                const submitButton = document.querySelector('#createUserModal [onclick*="createUser"]');
                submitButton.textContent = '–û–±–Ω–æ–≤–∏—Ç—å';
                submitButton.setAttribute('onclick', `updateUser(${userId})`);

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                const modal = new bootstrap.Modal(document.getElementById('createUserModal'));
                modal.show();
            }
        })
        .catch(error => {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            alert('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        });
}

async function updateUser(userId) {
    try {
        const form = document.getElementById('createUserForm');
        const formData = new FormData(form);

        const data = {
            username: formData.get('username'),
            email: formData.get('email'),
            role: formData.get('role'),
            is_active: formData.has('is_active')
        };

        const response = await fetch(`/api/users/${userId}`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(data)
        });

        const result = await response.json();

        if (result.success) {
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            bootstrap.Modal.getInstance(document.getElementById('createUserModal')).hide();

            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
            resetCreateUserModal();

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if (window.adminPanel) {
                window.adminPanel.loadUsers();
            }

            alert('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
        } else {
            alert('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ' + result.error);
        }

    } catch (error) {
        alert('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ' + error.message);
    }
}

function resetCreateUserModal() {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    document.querySelector('#createUserModal .modal-title').textContent = '–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è';

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–µ –ø–∞—Ä–æ–ª—è
    const form = document.getElementById('createUserForm');
    const passwordField = form.querySelector('[name="password"]');
    const passwordContainer = passwordField.closest('.mb-3');
    passwordContainer.style.display = 'block';
    passwordField.required = true;

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
    const submitButton = document.querySelector('#createUserModal [onclick*="User"]');
    submitButton.textContent = '–°–æ–∑–¥–∞—Ç—å';
    submitButton.setAttribute('onclick', 'createUser()');

    // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
    form.reset();
}

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
document.addEventListener('DOMContentLoaded', function() {
    const createUserModal = document.getElementById('createUserModal');
    if (createUserModal) {
        createUserModal.addEventListener('hidden.bs.modal', function () {
            resetCreateUserModal();
        });
    }
});

async function deleteUser(userId, username) {
    if (!confirm(`–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "${username}"?`)) return;

    try {
        const response = await fetch(`/api/users/${userId}`, {
            method: 'DELETE'
        });

        const result = await response.json();

        if (result.success) {
            if (window.adminPanel) {
                window.adminPanel.loadUsers();
            }
            alert('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω');
        } else {
            alert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ' + result.error);
        }

    } catch (error) {
        alert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ' + error.message);
    }
}

async function testEmail() {
    try {
        const response = await fetch('/api/test-email', {
            method: 'POST'
        });

        const result = await response.json();

        if (result.success) {
            alert('–¢–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
        } else {
            alert('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ' + result.error);
        }

    } catch (error) {
        alert('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ' + error.message);
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è —Ä–µ–∂–∏–º–æ–≤
function switchSettingsMode(mode) {
    if (window.adminPanel) {
        window.adminPanel.switchSettingsMode(mode);
    }
}

function resetSettings() {
    if (window.adminPanel) {
        window.adminPanel.resetSettings();
    }
}

// –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π
async function createBackup() {
    showSystemOperation('–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...');
    try {
        const response = await fetch('/api/system/backup', { method: 'POST' });
        const result = await response.json();

        if (result.success) {
            showSystemOperationResult(`
                <div class="alert alert-success">
                    <h6>–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!</h6>
                    <p>–§–∞–π–ª: ${result.backup_name}</p>
                    <p>–†–∞–∑–º–µ—Ä: ${(result.size / 1024 / 1024).toFixed(2)} –ú–ë</p>
                </div>
            `);
        } else {
            showSystemOperationResult(`<div class="alert alert-danger">–û—à–∏–±–∫–∞: ${result.error}</div>`);
        }
    } catch (error) {
        showSystemOperationResult(`<div class="alert alert-danger">–û—à–∏–±–∫–∞: ${error.message}</div>`);
    }
}

async function exportConfig() {
    showSystemOperation('–≠–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...');
    try {
        const response = await fetch('/api/system/export-config');
        const config = await response.json();

        const blob = new Blob([JSON.stringify(config, null, 2)], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `config_${new Date().toISOString().split('T')[0]}.json`;
        a.click();

        showSystemOperationResult(`<div class="alert alert-success">–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!</div>`);
    } catch (error) {
        showSystemOperationResult(`<div class="alert alert-danger">–û—à–∏–±–∫–∞: ${error.message}</div>`);
    }
}

async function checkSystemHealth() {
    showSystemOperation('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã...');
    try {
        const response = await fetch('/api/system/health');
        const health = await response.json();

        const statusColor = health.overall_status === 'healthy' ? 'success' : 'warning';

        const checksHtml = health.checks.map(check => `
            <div class="d-flex justify-content-between align-items-center border-bottom pb-2 mb-2">
                <span>${check.name}</span>
                <span class="badge bg-${check.status === 'OK' ? 'success' : check.status === 'WARNING' ? 'warning' : 'danger'}">
                    ${check.status}
                </span>
            </div>
            <small class="text-muted">${check.message}</small>
        `).join('');

        showSystemOperationResult(`
            <div class="alert alert-${statusColor}">
                <h6>–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã: ${health.overall_status}</h6>
                <small>–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: ${health.timestamp}</small>
            </div>
            <div>${checksHtml}</div>
        `);
    } catch (error) {
        showSystemOperationResult(`<div class="alert alert-danger">–û—à–∏–±–∫–∞: ${error.message}</div>`);
    }
}

async function cleanupOldData() {
    if (!confirm('–£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π?')) return;

    showSystemOperation('–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    try {
        const response = await fetch('/api/system/cleanup', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ retention_days: 30 })
        });
        const result = await response.json();

        if (result.success) {
            showSystemOperationResult(`
                <div class="alert alert-success">
                    <h6>–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!</h6>
                    <p>–£–¥–∞–ª–µ–Ω–æ –º–µ—Ç—Ä–∏–∫: ${result.cleaned.metrics}</p>
                    <p>–£–¥–∞–ª–µ–Ω–æ –ª–æ–≥–æ–≤ –∞—É–¥–∏—Ç–∞: ${result.cleaned.audit_logs}</p>
                    <p>–£–¥–∞–ª–µ–Ω–æ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π: ${result.cleaned.resolved_alerts}</p>
                </div>
            `);
        } else {
            showSystemOperationResult(`<div class="alert alert-danger">–û—à–∏–±–∫–∞: ${result.error}</div>`);
        }
    } catch (error) {
        showSystemOperationResult(`<div class="alert alert-danger">–û—à–∏–±–∫–∞: ${error.message}</div>`);
    }
}

async function showSystemStats() {
    showSystemOperation('–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã...');
    try {
        const response = await fetch('/api/system/statistics');
        const stats = await response.json();

        showSystemOperationResult(`
            <div class="row">
                <div class="col-md-6">
                    <h6>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö</h6>
                    <ul>
                        <li>–í—Å–µ–≥–æ –º–µ—Ç—Ä–∏–∫: ${stats.database?.total_metrics || 0}</li>
                        <li>–í—Å–µ–≥–æ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π: ${stats.database?.total_alerts || 0}</li>
                        <li>–ê–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–æ–≤–µ—â–µ–Ω–∏–π: ${stats.database?.active_alerts || 0}</li>
                        <li>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.database?.total_users || 0}</li>
                    </ul>
                </div>
                <div class="col-md-6">
                    <h6>–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞</h6>
                    <ul>
                        <li>–°–æ–±—Ä–∞–Ω–æ –º–µ—Ç—Ä–∏–∫: ${stats.last_24h?.metrics_collected || 0}</li>
                        <li>–°–æ–∑–¥–∞–Ω–æ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π: ${stats.last_24h?.alerts_generated || 0}</li>
                        <li>–í—Ö–æ–¥–æ–≤ –≤ —Å–∏—Å—Ç–µ–º—É: ${stats.last_24h?.user_logins || 0}</li>
                    </ul>
                </div>
            </div>
        `);
    } catch (error) {
        showSystemOperationResult(`<div class="alert alert-danger">–û—à–∏–±–∫–∞: ${error.message}</div>`);
    }
}

async function showBackgroundStatus() {
    showSystemOperation('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ–Ω–æ–≤—ã—Ö —Å–ª—É–∂–±...');
    try {
        const response = await fetch('/api/system/background-status');
        const status = await response.json();

        showSystemOperationResult(`
            <div class="alert alert-${status.monitoring_active ? 'success' : 'warning'}">
                <h6>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: ${status.monitoring_active ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}</h6>
                ${status.last_data_time ? `<p>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ: ${status.last_data_time}</p>` : ''}
                ${status.seconds_since_last ? `<p>–°–µ–∫—É–Ω–¥ –Ω–∞–∑–∞–¥: ${status.seconds_since_last}</p>` : ''}
                <p>–í—Å–µ–≥–æ –º–µ—Ç—Ä–∏–∫ –≤ –ë–î: ${status.total_metrics_count}</p>
            </div>
        `);
    } catch (error) {
        showSystemOperationResult(`<div class="alert alert-danger">–û—à–∏–±–∫–∞: ${error.message}</div>`);
    }
}

function showSystemOperation(message) {
    const container = document.getElementById('system-operation-results');
    const content = document.getElementById('operation-content');

    content.innerHTML = `
        <div class="text-center">
            <div class="spinner-border text-primary" role="status"></div>
            <p class="mt-2">${message}</p>
        </div>
    `;

    container.style.display = 'block';
}

function showSystemOperationResult(html) {
    const content = document.getElementById('operation-content');
    content.innerHTML = html;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
console.log('üîÑ –ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∫–∏...');
window.adminPanel = new AdminPanel();